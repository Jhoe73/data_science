def calc_digitos_cpf(corpo):
    """Calcula os dois dígitos verificadores do CPF"""
    # Pesos para o cálculo do CPF
    peso1 = [10, 9, 8, 7, 6, 5, 4, 3, 2]
    peso2 = [11, 10, 9, 8, 7, 6, 5, 4, 3, 2]

    # Cálculo do primeiro dígito verificador
    f = sum(int(corpo[i]) * peso1[i] for i in range(9))
    first = 11 - (f % 11)
    if first >= 10:
        first = 0

    # Cálculo do segundo dígito verificador
    s = sum(int(corpo[i]) * peso2[i] for i in range(9)) + first * 2
    second = 11 - (s % 11)
    if second >= 10:
        second = 0

    return f"{first}{second}"


def calc_digitos_cnpj(corpo):
    """Calcula os dois dígitos verificadores do CNPJ"""
    # Pesos para o cálculo do CNPJ
    peso1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]
    peso2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2]

    # Cálculo do primeiro dígito verificador
    f = sum(int(corpo[i]) * peso1[i] for i in range(12))
    first = 11 - (f % 11)
    if first >= 10:
        first = 0

    # Cálculo do segundo dígito verificador
    s = sum(int(corpo[i]) * peso2[i] for i in range(12)) + first * 2
    second = 11 - (s % 11)
    if second >= 10:
        second = 0

    return f"{first}{second}"


def cpfcnpj_completo_gen(x):
    """Função para gerar CPF ou CNPJ completo"""
    x = str(x)
    
    if len(x) == 11:
        # CPF: usar os 9 primeiros dígitos
        corpo = x[:9]
        return corpo + calc_digitos_cpf(corpo)
    
    elif len(x) == 14:
        # CNPJ: usar os 12 primeiros dígitos
        corpo = x[:12]
        return corpo + calc_digitos_cnpj(corpo)
    
    else:
        return "Erro: Tamanho inválido"


# Exemplos de uso
cpf = "123456789"
cpf_completo = cpfcnpj_completo_gen(cpf)
print(f"CPF completo: {cpf_completo}")

cnpj = "123456780001"
cnpj_completo = cpfcnpj_completo_gen(cnpj)
print(f"CNPJ completo: {cnpj_completo}")
